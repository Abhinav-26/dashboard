import React, { useCallback, useEffect, useState } from 'react'
import Tippy from '@tippyjs/react'
import { ReactComponent as Question } from '../../../../assets/icons/ic-help-outline.svg'
import { ReactComponent as Bug } from '../../../../assets/icons/ic-nav-bug.svg'
import { ReactComponent as Secure } from '../../../../assets/icons/ic-secure.svg'
import { SecurityVulnerabilityCardType } from './appDetails.type'
import LoadingCard from './LoadingCard'
import { ScanDetailsModal, importComponentFromFELibrary } from '../../../common'
import { getLastExecutionMinByAppAndEnv } from '../../../../services/service'

const getSecurityScan = importComponentFromFELibrary('getSecurityScan', null, 'function')
const getSecurityScanSeveritiesCount = importComponentFromFELibrary('getSecurityScanSeveritiesCount', null, 'function')

const SecurityModal = importComponentFromFELibrary('SecurityModal')

export const SecurityVulnerabilityCard = ({
    cardLoading,
    appId,
    envId,
    installedAppId,
}: SecurityVulnerabilityCardType) => {
    const [showScanDetailsModal, toggleScanDetailsModal] = useState<boolean>(false)
    const [apiLoader, setAPILoader] = useState<boolean>(false)
    const [lastExecutionDetail, setLastExecutionDetail] = useState({
        imageScanDeployInfoId: 0,
        severityCount: { critical: 0, high: 0, moderate: 0, low: 0 },
        isError: false,
    })
    const { critical = 0, high = 0, moderate = 0, low = 0 } = lastExecutionDetail.severityCount
    const totalCount = critical + high + moderate + low || 0

    const handleModalClose = () => toggleScanDetailsModal(false)

    const handleOnCardClick = () => {
        if (!cardLoading) {
            toggleScanDetailsModal(true)
        }
    }

    async function getScanData() {
        if (!appId || !envId) {
            return
        }
        setAPILoader(true)
        const isSecurityScanV2Enabled = window._env_.ENABLE_RESOURCE_SCAN_V2

        try {
            const { result } = await (isSecurityScanV2Enabled
                ? getSecurityScan(appId, envId, installedAppId)
                : getLastExecutionMinByAppAndEnv(appId, envId))
            setLastExecutionDetail({
                imageScanDeployInfoId: result.imageScanDeployInfoId,
                severityCount: isSecurityScanV2Enabled ? getSecurityScanSeveritiesCount(result) : result.severityCount,
                isError: false,
            })
        } catch (error) {
            setLastExecutionDetail({
                imageScanDeployInfoId: 0,
                severityCount: { critical: 0, high: 0, moderate: 0, low: 0 },
                isError: true,
            })
        } finally {
            setAPILoader(false)
        }
    }
    useEffect(() => {
        getScanData()
    }, [])

    if (cardLoading || apiLoader) {
        return <LoadingCard />
    }

    return (
        <>
            <div
                data-testid="security-vulnerability-card"
                onClick={handleOnCardClick}
                className="app-details-info-card pointer flex left bcn-0 br-8 mr-12 lh-20 w-200"
            >
                <div className="app-details-info-card__top-container flex">
                    <div className="app-details-info-card__top-container__content">
                        <div className="app-details-info-card__top-container__content__title-wrapper">
                            <div className="fs-12 fw-4 cn-7 mr-5">Security</div>
                            <Tippy
                                className="default-tt"
                                arrow={false}
                                placement="top"
                                content="Security scan result for the currently deployed image"
                            >
                                <div className="flex">
                                    <Question className="icon-dim-16 mt-2" />
                                </div>
                            </Tippy>
                        </div>
                        <div className="flex fs-12 fw-4">
                            {!totalCount ? (
                                <div className="dc__info-title lh-20 ">You're secure!</div>
                            ) : (
                                <div className="fs-13 fw-6 lh-20 f-waiting">{totalCount} Vulnerabilities</div>
                            )}
                        </div>
                    </div>
                    {!totalCount ? <Secure /> : <Bug className="scy-7" />}
                </div>
                <div className="app-details-info-card__bottom-container">
                    <span className="app-details-info-card__bottom-container__message mr-2 fs-12 fw-4">
                        {!totalCount
                            ? 'No Vulnerabilities found'
                            : `${critical} Critical, ${high ? `${high} High, ` : ''}${moderate} Moderate, ${low} Low`}
                    </span>
                    <div className="app-details-info-card__bottom-container__details fs-12 fw-6">Details</div>
                </div>
            </div>
            {showScanDetailsModal &&
                (window._env_.ENABLE_RESOURCE_SCAN_V2 ? (
                    SecurityModal && (
                        <SecurityModal
                            appId={appId}
                            envId={envId}
                            installedAppId={installedAppId}
                            handleModalClose={handleModalClose}
                        />
                    )
                ) : (
                    <ScanDetailsModal
                        showAppInfo={false}
                        uniqueId={{
                            imageScanDeployInfoId: lastExecutionDetail.imageScanDeployInfoId,
                            appId: appId,
                            envId: envId,
                        }}
                        close={handleModalClose}
                    />
                ))}
        </>
    )
}

export default React.memo(SecurityVulnerabilityCard)
